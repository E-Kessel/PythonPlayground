import sys
import glob
import serial
import time
from subprocess import call

# The following function was an example of 
def serial_ports():
    """ Lists serial port names

        :raises EnvironmentError:
            On unsupported or unknown platforms
        :returns:
            A list of the serial ports available on the system
    """
    if sys.platform.startswith('win'):
        ports = ['COM%s' % (i + 1) for i in range(256)]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        # this excludes your current terminal "/dev/tty"
        ports = glob.glob('/dev/tty[A-Za-z]*')
    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*')
    else:
        raise EnvironmentError('Unsupported platform')

    result = []
    for port in ports:
        try:
            s = serial.Serial(port)
            s.close()
            result.append(port)
        except (OSError, serial.SerialException):
            pass
    return result

def wait_port():
    """ waits for known serial Vantage Pro2 serial port

        : raises None
        : returns None
    """
    # Known port for Vantage Pro 2 serial driver
    vpro = '/dev/cu.SLAB_USBtoUART'

    # Wait until we see that the port path is available
    waiting = True
    count = 1
    while (waiting):
        try:
            # We don't really care about the actual communication
            # rate because we just want to know if the serial
            # path is available. However, we will set the baud
            # rate to 19200 as indicated by the Vantage Pro specs.
            # The timeout value applies to any commands we might
            # choose to send in the future.
            s = serial.Serial(vpro,19200,timeout=1.0)
            
            # If the above statement succeded then
            # for now we simply close the port and
            # exit the loop
            s.close()
            waiting = False
            
        except (OSError, serial.SerialException):
            # Don't pass the exception to the caller
            # Display a simple message
            print(str(count) + ") Waiting for " + vpro + " ...")
            # Wait a short time then keep looping until the exception stops
            time.sleep(1.0)
            count = count + 1

def start_wview():
    """ passes the system command to start the wview daemon

        : raises None
        : returns None
    """
    print("Starting wview...")
    # We will assume that this command will execute
    # during system startup with root privileges
    # so we don't need to use sudo (and reveal a password)
    call(["/opt/wview/wview","start"])
    
    # Start apache2 (web server: httpd) so we can see the web
    # pages generated by above; this also includes admin pages 
    call(["/opt/local/apache2/bin/apachectl", "restart"])
    

if __name__ == '__main__':
    wait_port()
    start_wview()
